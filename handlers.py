from aiogram import F
from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.types import Message, InputMediaPhoto
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import keyboards as kb
from config import Hellomsg, We
import aiosqlite
from aiogram.types import CallbackQuery

# from config import PAYMENT_TOKEN
# from aiogram.methods import SendInvoice


router = Router()

class Reg(StatesGroup):
    name = State()
    number = State()

class Rent(StatesGroup):
    type = State()
    district = State()
    town = State()
    price = State()
    area = State()
    rooms = State()
    description = State()
    photo = State()
class Find(StatesGroup):
    findtype = State() 
    findtown = State()
    finddistrict = State()
    pricemin = State()
    pricemax = State()
    areamin = State()
    areamax = State()
    findrooms = State()
    findroomsmax = State()
class Edit(StatesGroup):
    edit_field = State()
    edit_value = State()
    
@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back(message: Message, state: FSMContext):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.main)
    await state.clear()



#–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
async def initialize_database():
    async with aiosqlite.connect('bot_database.db') as db:
        await db.execute("CREATE TABLE IF NOT EXISTS users (telegram_id INTEGER, name TEXT, number TEXT)")
        await db.execute("CREATE TABLE IF NOT EXISTS rent (telegram_id INTEGER, town TEXT, district TEXT, type TEXT, area INTEGER, rooms INTEGER, price INTEGER, description TEXT, photo BLOB)")
        await db.execute("CREATE TABLE IF NOT EXISTS favorites (telegram_id INTEGER, town TEXT, district TEXT, type TEXT, area INTEGER, rooms INTEGER, price INTEGER, description TEXT, photo BLOB)")
        await db.execute("CREATE INDEX IF NOT EXISTS idx_users_telegram_id ON users (telegram_id)")
        await db.execute("CREATE INDEX IF NOT EXISTS idx_rent_town ON rent (town)")
        await db.execute("CREATE INDEX IF NOT EXISTS idx_rent_district ON rent (district)")
        await db.execute("CREATE INDEX IF NOT EXISTS idx_rent_type ON rent (type)")
        await db.execute("CREATE INDEX IF NOT EXISTS idx_rent_rooms ON rent (rooms)")
        await db.execute("CREATE INDEX IF NOT EXISTS idx_rent_area ON rent (area)")
        await db.execute("CREATE INDEX IF NOT EXISTS idx_rent_price ON rent (price)")
        await db.commit()

async def add_to_database(telegram_id, name, number):
    async with aiosqlite.connect('bot_database.db') as db:
        cursor = await db.execute('SELECT * FROM users WHERE telegram_id = ?', (telegram_id,))
        data = await cursor.fetchone()
        if data is not None:
           return
        await db.execute("INSERT INTO users (telegram_id, name, number) VALUES (?, ?, ?)", (telegram_id, name, number))
        await db.commit()

async def add_to_database_rent(telegram_id, town, district, property_type, area, rooms, price, description, photos):
    valid_photos = ','.join([photo for photo in photos if all(c.isalnum() or c in '-_' for c in photo) and len(photo) > 0])
    async with aiosqlite.connect('bot_database.db') as db:
        await db.execute("INSERT INTO rent (telegram_id, town, district, type, area, rooms, price, description, photo) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)", (telegram_id, town, district, property_type, area, rooms, price, description, valid_photos))
        await db.commit()

@router.message(F.text == "üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def reg1(message: Message, state: FSMContext):
    async with aiosqlite.connect('bot_database.db') as db:
        cursor = await db.execute('SELECT * FROM users WHERE telegram_id = ?', (message.from_user.id,))
        data = await cursor.fetchone()
        if data is not None:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=kb.main)
            return
    await state.set_state(Reg.name)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è")

@router.message(Reg.name)
async def reg2(message: Message, state: FSMContext):
        await state.update_data(name=message.text)
        await state.set_state(Reg.number)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç", reply_markup=kb.contact)

@router.message(Reg.number, F.contact)
async def reg3(message: Message, state: FSMContext):
    if message.contact:
        phone_number = message.contact.phone_number
        if not phone_number.startswith("+"):
            phone_number = "+" + phone_number
        await state.update_data(number=phone_number)
        data = await state.get_data()
        await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. \n–ò–º—è: {data['name']}\n–ù–æ–º–µ—Ä –¢–µ–ª–µ—Ñ–æ–Ω–∞: {data['number']}",
                             reply_markup=kb.main)
        await add_to_database(message.from_user.id, data['name'], data['number'])
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç.")

#Start
@router.message(CommandStart())
async def start(message: Message):
    await message.answer(Hellomsg, reply_markup=kb.main)
                         

#–°–¥–∞—Ç—å –≤ –ê—Ä–µ–Ω–¥—É                          
@router.message(F.text == "üóùÔ∏è –°–¥–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É")
async def rent_town(message: Message, state: FSMContext):
    async with aiosqlite.connect('bot_database.db') as db:
        cursor = await db.execute('SELECT * FROM users WHERE telegram_id = ?', (message.from_user.id,))
        data = await cursor.fetchone()
        if data is None:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=kb.main)
            return
    await state.update_data(photos=[])
    await state.set_state(Rent.town)
    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å –∂–∏–ª—å–µ?",
                         reply_markup=kb.Town2)
        

@router.message(Rent.town)
async def rent_district(message: Message, state: FSMContext):
    await state.update_data(town=message.text)
    await state.set_state(Rent.district)
    if message.text == "–¢–∞—à–∫–µ–Ω—Ç":
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ä–∞–π–æ–Ω, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞—à–µ –∂–∏–ª—å–µ.",
                             reply_markup=kb.tdists1)
    elif message.text == "–°–∞–º–∞—Ä–∫–∞–Ω–¥":
        await message.answer('–£–∫–∞–∂–∏—Ç–µ —Ä–∞–π–æ–Ω, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞—à–µ –∂–∏–ª—å–µ.',
                             reply_markup=kb.sdists1)

@router.message(Rent.district)
async def rent_type(message: Message, state: FSMContext):
    await state.update_data(district=message.text)
    await state.set_state(Rent.type)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∂–∏–ª—å—è:",
                         reply_markup=kb.type)

@router.message(Rent.type)
async def rent_rooms(message: Message, state: FSMContext):
    await state.update_data(type=message.text)
    await state.set_state(Rent.rooms)
    await message.answer("–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤ –≤–∞—à–µ–º –∂–∏–ª—å–µ?",
                         reply_markup=kb.back)

@router.message(Rent.rooms)
async def rent_area(message: Message, state: FSMContext):
    await state.update_data(rooms=message.text)
    await state.set_state(Rent.area)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –≤ –º¬≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50).")

@router.message(Rent.area)
async def rent_price(message: Message, state: FSMContext):
    await state.update_data(area=message.text)
    await state.set_state(Rent.price)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê –∑–∞ –º–µ—Å—è—Ü –∞—Ä–µ–Ω–¥—ã")

@router.message(Rent.price)
async def rent_description(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    await state.set_state(Rent.description)
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –∂–∏–ª—å–µ: –µ—Å—Ç—å –ª–∏ –º–µ–±–µ–ª—å, —Ç–µ—Ö–Ω–∏–∫–∞, Wi-Fi –∏ –¥—Ä—É–≥–∏–µ —É–¥–æ–±—Å—Ç–≤–∞?")

@router.message(Rent.description)
async def rent_photo(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∂–∏–ª—å—è")
    await state.set_state(Rent.photo)

@router.message(Rent.photo, F.photo)
async def add_photo(message: Message, state: FSMContext):
    rent_data = await state.get_data()
    photos = rent_data.get('photos', [])
    file_id = message.photo[-1].file_id
    if all(c.isalnum() or c in '-_' for c in file_id):
        photos.append(file_id)
        await state.update_data(photos=photos)
        await message.answer("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ–≥–æ. –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'", reply_markup=kb.add_more_photos_or_finish)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(Rent.photo, F.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def finish_rent(message: Message, state: FSMContext):
    rent_data = await state.get_data()
    photos = rent_data.get('photos', [])
    if photos:
        media_group = [InputMediaPhoto(media=photo) for photo in photos if all(c.isalnum() or c in '-_' for c in photo) and len(photo) > 0]
        await message.answer_media_group(media_group)
        await message.answer(f"–ì–æ—Ä–æ–¥: {rent_data['town']}\n–†–∞–π–æ–Ω: {rent_data['district']}\n–¢–∏–ø –ñ–∏–ª—å—è: {rent_data['type']}\n–¶–µ–Ω–∞: {rent_data['price']}\n–ü–ª–æ—â–∞–¥—å: {rent_data['area']}\n–ö–æ–º–Ω–∞—Ç—ã: {rent_data['rooms']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {rent_data['description']}\n‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!")
    else:
        await message.answer("–ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    
    await add_to_database_rent(message.from_user.id, rent_data['town'], rent_data['district'], rent_data['type'], rent_data['area'], rent_data['rooms'], rent_data['price'], rent_data['description'], photos)
    await state.clear()
    await message.answer("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!", reply_markup=kb.main)

@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å")
async def edit_rent_data(message: Message, state: FSMContext):
    rent_data = await state.get_data()
    await message.answer(f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n–ì–æ—Ä–æ–¥: {rent_data['town']}\n–†–∞–π–æ–Ω: {rent_data['district']}\n–¢–∏–ø –ñ–∏–ª—å—è: {rent_data['type']}\n–¶–µ–Ω–∞: {rent_data['price']}\n–ü–ª–æ—â–∞–¥—å: {rent_data['area']}\n–ö–æ–º–Ω–∞—Ç—ã: {rent_data['rooms']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {rent_data['description']}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:\n1. –ì–æ—Ä–æ–¥\n2. –†–∞–π–æ–Ω\n3. –¢–∏–ø –ñ–∏–ª—å—è\n4. –¶–µ–Ω–∞\n5. –ü–ª–æ—â–∞–¥—å\n6. –ö–æ–º–Ω–∞—Ç—ã\n7. –û–ø–∏—Å–∞–Ω–∏–µ\n8. –§–æ—Ç–æ", reply_markup=kb.main)
    await state.set_state(Edit.edit_field)

@router.message(Edit.edit_field)
async def edit_field(message: Message, state: FSMContext):
    field_number = message.text
    fields = {
        "1": "town",
        "2": "district",
        "3": "type",
        "4": "price",
        "5": "area",
        "6": "rooms",
        "7": "description",
        "8": "photo"
    }
    if field_number in fields:
        await state.update_data(edit_field=fields[field_number])
        if fields[field_number] == "photo":
            await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∂–∏–ª—å—è")
        else:
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {fields[field_number]}")
        await state.set_state(Edit.edit_value)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(Edit.edit_value)
async def edit_value(message: Message, state: FSMContext):
    data = await state.get_data()
    edit_field = data.get('edit_field')

    if edit_field == "photo":
        if message.photo:
            photos = data.get('photos', [])
            photos.append(message.photo[-1].file_id)
            await state.update_data(photos=photos)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ.")
            return
    else:
        await state.update_data({edit_field: message.text})

    rent_data = await state.get_data()
    photos = rent_data.get('photos', [])
    media_group = [InputMediaPhoto(media=photo) for photo in photos]
    await message.answer_media_group(media_group)
    await message.answer(f"–ì–æ—Ä–æ–¥: {rent_data['town']}\n–†–∞–π–æ–Ω: {rent_data['district']}\n–¢–∏–ø –ñ–∏–ª—å—è: {rent_data['type']}\n–¶–µ–Ω–∞: {rent_data['price']}\n–ü–ª–æ—â–∞–¥—å: {rent_data['area']}\n–ö–æ–º–Ω–∞—Ç—ã: {rent_data['rooms']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {rent_data['description']}\n–û–±—ä—è–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!",
                         reply_markup=kb.main)
    await message.answer("–ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–∞–∂–º–∏—Ç–µ '–ò–∑–º–µ–Ω–∏—Ç—å'.", reply_markup=kb.confirm_or_edit)
    await state.set_state(Rent.photo)



   
#–ù–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É
@router.message(F.text == "üè† –ù–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É")
async def findtown(message: Message, state: FSMContext):
    async with aiosqlite.connect('bot_database.db') as db:
        cursor = await db.execute('SELECT * FROM users WHERE telegram_id = ?', (message.from_user.id,))
        data = await cursor.fetchone()
        if data is None:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=kb.main)
            return
    await state.set_state(Find.findtown)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞", reply_markup=kb.Town2)
    

@router.message(Find.findtown)
async def finddistrict(message: Message, state: FSMContext):
    await state.update_data(findtown=message.text)
    await state.set_state(Find.finddistrict)
    if message.text == "–¢–∞—à–∫–µ–Ω—Ç":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–π–æ–Ω, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–Ω—è—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É",
                             reply_markup=kb.tdists2)
    elif message.text == "–°–∞–º–∞—Ä–∫–∞–Ω–¥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–π–æ–Ω, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–Ω—è—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É",
                             reply_markup=kb.sdists2)

@router.message(Find.finddistrict)
async def findtype(message: Message, state: FSMContext):
    await state.update_data(finddistrict=message.text)
    await state.set_state(Find.findtype)
    await message.answer("–ö–≤–∞—Ä—Ç–∏—Ä–∞, –î–æ–º –∏–ª–∏ –ö–æ–º–Ω–∞—Ç–∞",
                         reply_markup=kb.type)

@router.message(Find.findtype)
async def findrooms(message: Message, state: FSMContext):
    await state.update_data(findtype=message.text)
    await state.set_state(Find.findrooms)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç",
                         reply_markup=kb.back)

@router.message(Find.findrooms)
async def findroomsmax(message: Message, state: FSMContext):
    await state.update_data(findrooms=message.text)
    await state.set_state(Find.findroomsmax)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç")

@router.message(Find.findroomsmax)
async def findarea(message: Message, state: FSMContext):
    await state.update_data(findroomsmax=message.text)
    await state.set_state(Find.areamin)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥—å")

@router.message(Find.areamin)
async def findareamax(message: Message, state: FSMContext):
    await state.update_data(areamin=message.text)
    await state.set_state(Find.areamax)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥—å")

@router.message(Find.areamax)
async def findpricemin(message: Message, state: FSMContext):
    await state.update_data(areamax=message.text)
    await state.set_state(Find.pricemin)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É")

@router.message(Find.pricemin)
async def findpricemax(message: Message, state: FSMContext):
    await state.update_data(pricemin=message.text)
    await state.set_state(Find.pricemax)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É")

@router.message(Find.pricemax)
async def find_results(message: Message, state: FSMContext):
    await state.update_data(pricemax=message.text)
    search_data = await state.get_data()
    
    district_query = "%" if search_data['finddistrict'].lower() == "–ª—é–±–æ–π —Ä–∞–π–æ–Ω" else search_data['finddistrict']
    
    async with aiosqlite.connect('bot_database.db') as db:
        cursor = await db.execute(
            "SELECT rent.town, rent.district, rent.type, rent.area, rent.rooms, rent.price, rent.description, rent.photo, users.number FROM rent JOIN users ON rent.telegram_id = users.telegram_id WHERE rent.town = ? AND rent.district LIKE ? AND rent.type = ? AND rent.rooms BETWEEN ? AND ? AND rent.area BETWEEN ? AND ? AND rent.price BETWEEN ? AND ?",
            (search_data['findtown'], district_query, search_data['findtype'], search_data['findrooms'], search_data['findroomsmax'], search_data['areamin'], search_data['areamax'], search_data['pricemin'], search_data['pricemax'])
        )
        results = await cursor.fetchall()
    
    if results:
        await state.update_data(results=results, current_index=0)
        await show_next_result(message, state)
    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb.main)
        await state.clear()

async def show_next_result(message: Message, state: FSMContext):
    data = await state.get_data()
    results = data['results']
    current_index = data.get('current_index', 0)
    if current_index < len(results):
        result = results[current_index]
        photos = result[7].split(',')
        media_group = [InputMediaPhoto(media=photo) for photo in photos]
        try:
            await message.answer_media_group(media_group)
            await message.answer(
                text=f"–ì–æ—Ä–æ–¥: {result[0]}\n–†–∞–π–æ–Ω: {result[1]}\n–¢–∏–ø –∂–∏–ª—å—è: {result[2]}\n–ü–ª–æ—â–∞–¥—å: {result[3]}\n–ö–æ–º–Ω–∞—Ç—ã: {result[4]}\n–¶–µ–Ω–∞: {result[5]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {result[6]}\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {result[8]}",
                reply_markup=kb.add_to_favorites_or_skip
            )
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")
        await state.update_data(current_index=current_index + 1)

@router.callback_query(F.data == "previous_result")
async def previous_result(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data.get('current_index', 0)
    if current_index > 1:
        await state.update_data(current_index=current_index - 2)
        await show_next_result(callback_query.message, state)
    else:
        await callback_query.answer("–≠—Ç–æ –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.", show_alert=True)

@router.callback_query(F.data == "skip")
async def skip_result(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data.get('current_index', 0)
    results = data.get('results', [])
    
    if current_index >= len(results):
        await callback_query.answer("–≠—Ç–æ –±—ã–ª–∏ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.", reply_markup=kb.main, show_alert=True)
        return
    
    await show_next_result(callback_query.message, state)

@router.callback_query(F.data == "add_to_favorites")
async def add_to_favorites(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data.get('current_index', 0)
    results = data.get('results', [])
    
    if current_index > 0 and current_index <= len(results):
        result = results[current_index - 1]
        photos = result[7].split(',')
        async with aiosqlite.connect('bot_database.db') as db:
            await db.execute(
                "INSERT INTO favorites (telegram_id, town, district, type, area, rooms, price, description, photo) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
                (callback_query.from_user.id, result[0], result[1], result[2], result[3], result[4], result[5], result[6], ','.join(photos))
            )
            await db.commit()
        await callback_query.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
        await show_next_result(callback_query.message, state)
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.", show_alert=True)



@router.message(F.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def show_favorites(message: Message, state: FSMContext):
    async with aiosqlite.connect('bot_database.db') as db:
        cursor = await db.execute('SELECT town, district, type, area, rooms, price, description, photo FROM favorites WHERE telegram_id = ?', (message.from_user.id,))
        favorites = await cursor.fetchall()

        if favorites:
            await state.update_data(favorites=favorites, current_index=0)
            await show_next_favorite(message, state)
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.", reply_markup=kb.main)

async def show_next_favorite(message: Message, state: FSMContext):
    data = await state.get_data()
    favorites = data.get('favorites', [])
    current_index = data.get('current_index', 0)

    if current_index < len(favorites):
        favorite = favorites[current_index]
        photos = favorite[7].split(',')
        media_group = [InputMediaPhoto(media=photo) for photo in photos]
        try:
            await message.answer_media_group(media_group)
            await message.answer(
                f"–ì–æ—Ä–æ–¥: {favorite[0]}\n–†–∞–π–æ–Ω: {favorite[1]}\n–¢–∏–ø –∂–∏–ª—å—è: {favorite[2]}\n–ü–ª–æ—â–∞–¥—å: {favorite[3]}\n–ö–æ–º–Ω–∞—Ç—ã: {favorite[4]}\n–¶–µ–Ω–∞: {favorite[5]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {favorite[6]}",
                reply_markup=kb.next
            )
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")
        await state.update_data(current_index=current_index + 1)
    else:
        await state.clear()

@router.callback_query(F.data == "previous")
async def previous_favorite(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data.get('current_index')
    if current_index is not None and current_index > 1:
        await state.update_data(current_index=current_index - 2)
        await show_next_favorite(callback_query.message, state)
    else:
        await callback_query.answer("–≠—Ç–æ –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.", show_alert=True)


#–û –Ω–∞—Å
@router.message(F.text == "üìé –û –ù–∞—Å")
async def Onas(message:Message):
    await message.answer(We, reply_markup=kb.main)


#–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
@router.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def personal_account(message: Message):
    async with aiosqlite.connect('bot_database.db') as db:
        cursor = await db.execute('SELECT name, number FROM users WHERE telegram_id = ?', (message.from_user.id,))
        user_data = await cursor.fetchone()
        if user_data:
            await message.answer(f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: {user_data[0]}\n–ù–æ–º–µ—Ä: {user_data[1]}", reply_markup=kb.ads)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.", reply_markup=kb.ads)



#–ú–æ–¥–µ—Ä–∞—Ü–∏—è
class Moderate(StatesGroup):
    moderate_action = State()
    
@router.message(F.text == "/moderate")
async def moderate_start(message: Message, state: FSMContext):
    admin_ids = [1005986947, 768613544, 1116483191]
    if message.from_user.id not in admin_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=kb.main)
        return
    async with aiosqlite.connect('bot_database.db') as db:
        cursor = await db.execute('SELECT rowid, town, district, type, area, rooms, price, description, photo FROM rent')
        rent_data = await cursor.fetchall()
        if rent_data:
            await state.update_data(rent_data=rent_data, current_index=0)
            await show_next_moderate(message, state)
        else:
            await message.answer("–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.", reply_markup=kb.main)

async def show_next_moderate(message: Message, state: FSMContext):
    data = await state.get_data()
    rent_data = data.get('rent_data', [])
    current_index = data.get('current_index', 0)
    
    if current_index < len(rent_data):
        rent = rent_data[current_index]
        new_caption = f"ID: {rent[0]}\n–ì–æ—Ä–æ–¥: {rent[1]}\n–†–∞–π–æ–Ω: {rent[2]}\n–¢–∏–ø –ñ–∏–ª—å—è: {rent[3]}\n–ü–ª–æ—â–∞–¥—å: {rent[4]}\n–ö–æ–º–Ω–∞—Ç—ã: {rent[5]}\n–¶–µ–Ω–∞: {rent[6]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {rent[7]}"
        photos = rent[8].split(',') if rent[8] else []
        if photos:
            media_group = [InputMediaPhoto(media=photo) for photo in photos if all(c.isalnum() or c in '-_' for c in photo)]
            try:
                await message.answer_media_group(media_group)
            except Exception as e:
                await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")
        await message.answer(
            text=new_caption,
            reply_markup=kb.moderate
        )
        await state.update_data(current_index=current_index + 1)
    else:
        await message.answer("–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.", reply_markup=kb.main)

@router.callback_query(F.data == "delete")
async def delete_rent(callback_query: CallbackQuery, state: FSMContext):
            data = await state.get_data()
            rent_data = data['rent_data']
            current_index = data['current_index']
            rent = rent_data[current_index - 1]
            
            async with aiosqlite.connect('bot_database.db') as db:
                await db.execute('DELETE FROM rent WHERE rowid = ?', (rent[0],))
                await db.execute('DELETE FROM favorites WHERE town = ? AND district = ? AND type = ? AND area = ? AND rooms = ? AND price = ? AND description = ? AND photo = ?', 
                                 (rent[1], rent[2], rent[3], rent[4], rent[5], rent[6], rent[7], rent[8]))
                await db.commit()
            
            await callback_query.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
            await show_next_moderate(callback_query.message, state)

@router.callback_query(F.data == "next_moderate")
async def next_moderate(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    rent_data = data.get('rent_data', [])
    current_index = data.get('current_index', 0)
    
    if current_index < len(rent_data):
        await show_next_moderate(callback_query.message, state)
    else:
        await callback_query.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.", show_alert=True)

@router.callback_query(F.data == "previous_moderate")
async def previous_moderate(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data.get('current_index')
    if current_index is not None and current_index > 1:
        await state.update_data(current_index=current_index - 2)
        await show_next_moderate(callback_query.message, state)
    else:
        await callback_query.answer("–≠—Ç–æ –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.", show_alert=True)

#–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è

@router.message(F.text == "üì¢ –ú–æ–∏ –û–±—ä—è–≤–ª–µ–Ω–∏—è")
async def personal_account(message: Message, state: FSMContext):
                async with aiosqlite.connect('bot_database.db') as db:
                    cursor = await db.execute('SELECT town, district, area, type, rooms, price, description, photo FROM rent WHERE telegram_id = ?', (message.from_user.id,))
                    rent_data = await cursor.fetchall()
                    if rent_data:
                        await state.update_data(rent_data=rent_data, current_index=0)
                        await show_next_rent(message, state)
                    else:
                        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.", reply_markup=kb.main)

async def show_next_rent(message: Message, state: FSMContext):
    data = await state.get_data()
    rent_data = data.get('rent_data', [])
    current_index = data['current_index']
    
    if current_index < len(rent_data):
        rent = rent_data[current_index]
        photos = rent[7].split(',') if rent[7] else []
        if photos:
            media_group = [InputMediaPhoto(media=photo) for photo in photos]
            try:
                await message.answer_media_group(media_group)
                await message.answer(
                    f"–ì–æ—Ä–æ–¥: {rent[0]}\n–†–∞–π–æ–Ω: {rent[1]}\n–¢–∏–ø –ñ–∏–ª—å—è: {rent[3]}\n–ü–ª–æ—â–∞–¥—å: {rent[2]}\n–ö–æ–º–Ω–∞—Ç—ã: {rent[4]}\n–¶–µ–Ω–∞: {rent[5]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {rent[6]}",
                    reply_markup=kb.next
                )
            except Exception as e:
                await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")
        else:
            await message.answer(
                f"–ì–æ—Ä–æ–¥: {rent[0]}\n–†–∞–π–æ–Ω: {rent[1]}\n–¢–∏–ø –ñ–∏–ª—å—è: {rent[3]}\n–ü–ª–æ—â–∞–¥—å: {rent[2]}\n–ö–æ–º–Ω–∞—Ç—ã: {rent[4]}\n–¶–µ–Ω–∞: {rent[5]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {rent[6]}",
                reply_markup=kb.next
            )
        await state.update_data(current_index=current_index + 1)
    else:
        await message.answer("–≠—Ç–æ –±—ã–ª–∏ –≤—Å–µ –≤–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.", reply_markup=kb.main)
        await state.clear()

@router.callback_query(F.data == "next")
async def next_rent(callback_query: CallbackQuery, state: FSMContext):
                await callback_query.answer()
                await show_next_rent(callback_query.message, state)


